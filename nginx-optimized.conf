server {
    listen 80 default_server;
    listen [::]:80 default_server;
    server_name santoscsolutions.com _;
    return 301 https://santoscsolutions.com$uri;
}

# Force WWW to non-WWW (HTTP)
server {
    listen 80;
    listen [::]:80;
    server_name www.santoscsolutions.com;
    return 301 https://santoscsolutions.com$request_uri;
}

server {
    listen 443 ssl http2 default_server;
    listen [::]:443 ssl http2 default_server;

    server_name santoscsolutions.com _;

    # Global root to avoid accidental fallback to distro default
    root /var/www/santos-cleaning-frontend;
    index index.html;

    ssl_certificate /etc/letsencrypt/live/santoscsolutions.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/santoscsolutions.com/privkey.pem;
    include /etc/letsencrypt/options-ssl-nginx.conf;
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

    # Enhanced Gzip compression for maximum performance
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6; # Balanced compression level
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_min_length 256;
    gzip_types 
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/xml
        image/svg+xml
        font/woff
        font/woff2
        font/ttf
        font/otf;
    gzip_disable "msie6";

    # SPA para todos (desabilita SSR para evitar assets /_next que retornavam 500)
    # default home for users (SPA)
    location = / {
        root /var/www/santos-cleaning-frontend;
        index index.html;
        try_files /index.html =404;
    }
    # SEO-friendly home for well-known bots (simple UA check return)
    location / {
        root /var/www/santos-cleaning-frontend;
        index index.html;
        if ($http_user_agent ~* (googlebot|bingbot|slurp|duckduckbot|yandex|baiduspider|semrush|ahrefs|seobility|crawler|spider)) { return 302 /index.seo.html; }
        try_files $uri $uri/ /index.html;
    }

    # Bloqueia qualquer resquício de /_next/ para não gerar 500
    location ^~ /_next/ { return 404; }

    # Proxy for API Python backend
    location /api/ {
        proxy_pass http://127.0.0.1:8001;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        proxy_read_timeout 300s;
        proxy_connect_timeout 75s;
    }

    # Serve dedicated legal pages directly from filesystem (no SPA fallback)
    location ^~ /legal/ {
        root /var/www/santos-cleaning-frontend;
        index index.html;
        try_files $uri $uri/ =404;
    }

    # Localized hubs: serve static router pages that map hash to dedicated legal pages
    location ^~ /politicas-legais {
        root /var/www/santos-cleaning-frontend;
        index index.html;
        try_files $uri $uri/ /politicas-legais/index.html;
    }
    location ^~ /politicas-legales {
        root /var/www/santos-cleaning-frontend;
        index index.html;
        try_files $uri $uri/ /politicas-legales/index.html;
    }
    # PT direct routes without hash
    location = /politicas-legais/privacidade { return 301 https://$host/legal/privacy/; }
    location = /politicas-legais/termos { return 301 https://$host/legal/terms/; }
    location = /politicas-legais/aviso { return 301 https://$host/legal/disclaimer/; }

    # Redirect legacy legal slugs to canonical URLs used on site
    location = /legal/privacy-policy { return 301 https://$host/legal/privacy/; }
    location = /legal/terms-of-service { return 301 https://$host/legal/terms/; }
    location = /legal/cancellation-policy { return 301 https://$host/legal/terms/; }

    # Ensure /legal (no slash) redirects to canonical with trailing slash
    location = /legal { return 301 https://$host/legal/; }

    # Cache headers for static assets
    gzip_static on; # serve pre-compressed .gz when available

    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|otf)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header X-Content-Type-Options nosniff;
        try_files $uri =404;
    }

    # Cache headers for HTML
    # Cabeçalhos de cache para HTML (sem microcache global aqui para evitar erro de contexto)
    location ~* \.html$ {
        expires 5m;
        add_header Cache-Control "public, max-age=300, must-revalidate";
    }

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Permissions-Policy "geolocation=(), microphone=(), camera=()" always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    add_header Content-Security-Policy "default-src 'self' https:; img-src 'self' https: data:; script-src 'self' https: 'unsafe-inline'; style-src 'self' https: 'unsafe-inline'; font-src 'self' https: data:; connect-src 'self' https:; frame-ancestors 'self';" always;
} 

# Force WWW to non-WWW (HTTPS)
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name www.santoscsolutions.com;
    ssl_certificate /etc/letsencrypt/live/santoscsolutions.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/santoscsolutions.com/privkey.pem;
    include /etc/letsencrypt/options-ssl-nginx.conf;
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;
    return 301 https://santoscsolutions.com$request_uri;
}