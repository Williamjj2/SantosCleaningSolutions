{"version":3,"file":"static/js/330.e7c05ecd.chunk.js","mappings":"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","sources":["pages/LocalAreaPage.js","../node_modules/react-intersection-observer/src/observe.ts","../node_modules/react-intersection-observer/src/InView.tsx","../node_modules/react-intersection-observer/src/useInView.tsx"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { useParams, Link } from 'react-router-dom';\nimport { motion } from 'framer-motion';\nimport { useInView } from 'react-intersection-observer';\nimport Header from '../components/Header';\nimport Footer from '../components/Footer';\nimport ContactSection from '../components/ContactSection';\nimport ReviewsSection from '../components/ReviewsSection';\nimport { useTranslations } from '../utils/translations';\n\nconst LocalAreaPage = ({ currentLanguage, onLanguageChange }) => {\n  const { area } = useParams();\n  const { t } = useTranslations(currentLanguage);\n  const [ref, inView] = useInView({\n    threshold: 0.1,\n    triggerOnce: true\n  });\n\n  // Area-specific data\n  const areaData = {\n    marietta: {\n      name: 'Marietta',\n      population: '61,048',\n      zip: '30060, 30062, 30064, 30066, 30067, 30068',\n      neighborhoods: ['East Cobb', 'West Cobb', 'Marietta Square', 'Whitlock'],\n      landmarks: ['Marietta Square', 'Kennesaw Mountain', 'Six Flags White Water'],\n      description: 'Marietta is a vibrant city in Cobb County, known for its historic square, excellent schools, and family-friendly communities. Our cleaning services cover all Marietta neighborhoods, from the historic downtown to the newer developments in East Cobb.',\n      serviceHighlights: [\n        'Same-day service available in Marietta Square area',\n        'Special rates for East Cobb residents',\n        'Trusted by 200+ Marietta families',\n        'Licensed and insured in Cobb County'\n      ]\n    },\n    buckhead: {\n      name: 'Buckhead',\n      population: '78,000',\n      zip: '30305, 30309, 30319, 30324, 30326, 30327, 30342',\n      neighborhoods: ['West Paces', 'Chastain Park', 'Garden Hills', 'Peachtree Heights'],\n      landmarks: ['Lenox Square', 'Phipps Plaza', 'Atlanta History Center'],\n      description: 'Buckhead is Atlanta\\'s premier residential and commercial district, home to luxury estates, high-rise condominiums, and upscale shopping. Our premium cleaning services are tailored to meet the high standards of Buckhead residents.',\n      serviceHighlights: [\n        'Luxury home cleaning specialists',\n        'High-rise condo cleaning experts',\n        'Discrete and professional service',\n        'Eco-friendly products available'\n      ]\n    },\n    alpharetta: {\n      name: 'Alpharetta',\n      population: '65,818',\n      zip: '30004, 30005, 30009, 30022',\n      neighborhoods: ['Windward', 'Downtown Alpharetta', 'Crabapple', 'Milton'],\n      landmarks: ['Avalon', 'Wills Park', 'Ameris Bank Amphitheatre'],\n      description: 'Alpharetta is a thriving tech hub in North Fulton County, featuring modern homes, excellent schools, and a bustling downtown. We provide reliable cleaning services throughout Alpharetta, from Windward to Avalon.',\n      serviceHighlights: [\n        'Tech professional friendly scheduling',\n        'Move-in/out specialists for relocating families',\n        'Green cleaning options',\n        'Weekend and evening appointments'\n      ]\n    },\n    'sandy-springs': {\n      name: 'Sandy Springs',\n      population: '108,080',\n      zip: '30328, 30338, 30339, 30342, 30350, 30358',\n      neighborhoods: ['Riverside', 'North Springs', 'Dunwoody Springs', 'Huntcliff'],\n      landmarks: ['City Springs', 'Heritage Sandy Springs', 'Chattahoochee River'],\n      description: 'Sandy Springs is a dynamic city just north of Atlanta, offering a perfect blend of urban convenience and suburban tranquility. Our cleaning services help busy Sandy Springs families maintain beautiful, healthy homes.',\n      serviceHighlights: [\n        'Perimeter area specialists',\n        'River district coverage',\n        'Family-owned and operated',\n        'Flexible scheduling options'\n      ]\n    }\n  };\n\n  const currentArea = areaData[area] || areaData.marietta;\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n    // Update page title for SEO\n    document.title = `House Cleaning ${currentArea.name} GA | Professional Cleaning Services | Santos Cleaning`;\n  }, [currentArea]);\n\n  const containerVariants = {\n    hidden: { opacity: 0 },\n    visible: {\n      opacity: 1,\n      transition: {\n        staggerChildren: 0.1\n      }\n    }\n  };\n\n  const itemVariants = {\n    hidden: { opacity: 0, y: 20 },\n    visible: {\n      opacity: 1,\n      y: 0,\n      transition: { duration: 0.5 }\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Header \n        currentLanguage={currentLanguage}\n        onLanguageChange={onLanguageChange}\n      />\n      \n      {/* Hero Section */}\n      <section className=\"relative py-20 bg-gradient-to-br from-blue-600 to-blue-800 text-white\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"max-w-4xl mx-auto\">\n            <motion.nav \n              initial={{ opacity: 0, y: -20 }}\n              animate={{ opacity: 1, y: 0 }}\n              className=\"text-sm mb-6\"\n            >\n              <Link to=\"/\" className=\"hover:text-blue-200\">Home</Link>\n              <span className=\"mx-2\">/</span>\n              <Link to=\"/areas\" className=\"hover:text-blue-200\">Service Areas</Link>\n              <span className=\"mx-2\">/</span>\n              <span>{currentArea.name}</span>\n            </motion.nav>\n            \n            <motion.h1 \n              initial={{ opacity: 0, y: -20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: 0.1 }}\n              className=\"text-4xl md:text-5xl font-bold mb-6\"\n            >\n              House Cleaning Services in {currentArea.name}, GA\n            </motion.h1>\n            \n            <motion.p \n              initial={{ opacity: 0, y: -20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: 0.2 }}\n              className=\"text-xl text-blue-100 mb-8\"\n            >\n              Professional, reliable, and affordable cleaning services for {currentArea.name} residents\n            </motion.p>\n            \n            <motion.div\n              initial={{ opacity: 0, y: -20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: 0.3 }}\n              className=\"flex flex-col sm:flex-row gap-4\"\n            >\n              <a\n                href=\"tel:+18663509407\"\n                className=\"inline-block bg-white text-blue-600 px-8 py-3 rounded-lg font-semibold hover:bg-blue-50 transition-colors text-center\"\n              >\n                <i className=\"fas fa-phone mr-2\"></i>\n                (866) 350-9407\n              </a>\n              <Link\n                to=\"/contact\"\n                className=\"inline-block border-2 border-white text-white px-8 py-3 rounded-lg font-semibold hover:bg-white hover:text-blue-600 transition-all text-center\"\n              >\n                Get Free Estimate\n              </Link>\n            </motion.div>\n          </div>\n        </div>\n      </section>\n\n      {/* Local Area Info */}\n      <section ref={ref} className=\"py-16\">\n        <div className=\"container mx-auto px-4\">\n          <motion.div\n            variants={containerVariants}\n            initial=\"hidden\"\n            animate={inView ? \"visible\" : \"hidden\"}\n            className=\"max-w-6xl mx-auto\"\n          >\n            {/* Area Overview */}\n            <motion.div variants={itemVariants} className=\"mb-12\">\n              <h2 className=\"text-3xl font-bold text-gray-800 mb-6\">\n                Professional Cleaning Services in {currentArea.name}\n              </h2>\n              <p className=\"text-lg text-gray-700 leading-relaxed\">\n                {currentArea.description}\n              </p>\n            </motion.div>\n\n            {/* Service Highlights */}\n            <motion.div variants={itemVariants} className=\"grid md:grid-cols-2 gap-8 mb-12\">\n              <div className=\"bg-white rounded-xl shadow-lg p-8\">\n                <h3 className=\"text-2xl font-semibold text-gray-800 mb-4\">\n                  Why Choose Santos Cleaning in {currentArea.name}?\n                </h3>\n                <ul className=\"space-y-3\">\n                  {currentArea.serviceHighlights.map((highlight, index) => (\n                    <li key={index} className=\"flex items-start\">\n                      <i className=\"fas fa-check-circle text-green-500 mt-1 mr-3\"></i>\n                      <span className=\"text-gray-700\">{highlight}</span>\n                    </li>\n                  ))}\n                </ul>\n              </div>\n\n              <div className=\"bg-white rounded-xl shadow-lg p-8\">\n                <h3 className=\"text-2xl font-semibold text-gray-800 mb-4\">\n                  {currentArea.name} Service Coverage\n                </h3>\n                <div className=\"space-y-4\">\n                  <div>\n                    <p className=\"font-semibold text-gray-700 mb-2\">Neighborhoods We Serve:</p>\n                    <p className=\"text-gray-600\">{currentArea.neighborhoods.join(', ')}</p>\n                  </div>\n                  <div>\n                    <p className=\"font-semibold text-gray-700 mb-2\">ZIP Codes:</p>\n                    <p className=\"text-gray-600\">{currentArea.zip}</p>\n                  </div>\n                  <div>\n                    <p className=\"font-semibold text-gray-700 mb-2\">Population Served:</p>\n                    <p className=\"text-gray-600\">{currentArea.population} residents</p>\n                  </div>\n                </div>\n              </div>\n            </motion.div>\n\n            {/* Local Content */}\n            <motion.div variants={itemVariants} className=\"bg-blue-50 rounded-xl p-8 mb-12\">\n              <h3 className=\"text-2xl font-semibold text-gray-800 mb-4\">\n                Serving {currentArea.name}'s Landmarks and Communities\n              </h3>\n              <p className=\"text-gray-700 mb-4\">\n                Our cleaning teams are familiar with all areas of {currentArea.name}, including popular landmarks like {currentArea.landmarks.join(', ')}. \n                Whether you live in a historic home, modern condo, or suburban house, we have the expertise to keep your space pristine.\n              </p>\n              <p className=\"text-gray-700\">\n                As a locally-operated business, we understand the unique needs of {currentArea.name} residents. \n                From busy professionals to growing families, we provide flexible cleaning solutions that fit your lifestyle and budget.\n              </p>\n            </motion.div>\n\n            {/* Services Grid */}\n            <motion.div variants={itemVariants}>\n              <h3 className=\"text-2xl font-semibold text-gray-800 mb-6 text-center\">\n                Our {currentArea.name} Cleaning Services\n              </h3>\n              <div className=\"grid md:grid-cols-3 gap-6\">\n                <div className=\"bg-white rounded-lg shadow-md p-6 text-center\">\n                  <i className=\"fas fa-home text-4xl text-blue-600 mb-4\"></i>\n                  <h4 className=\"text-xl font-semibold mb-2\">Regular Cleaning</h4>\n                  <p className=\"text-gray-600\">Weekly, bi-weekly, or monthly maintenance cleaning</p>\n                </div>\n                <div className=\"bg-white rounded-lg shadow-md p-6 text-center\">\n                  <i className=\"fas fa-spray-can text-4xl text-green-600 mb-4\"></i>\n                  <h4 className=\"text-xl font-semibold mb-2\">Deep Cleaning</h4>\n                  <p className=\"text-gray-600\">Comprehensive top-to-bottom cleaning service</p>\n                </div>\n                <div className=\"bg-white rounded-lg shadow-md p-6 text-center\">\n                  <i className=\"fas fa-truck-moving text-4xl text-purple-600 mb-4\"></i>\n                  <h4 className=\"text-xl font-semibold mb-2\">Move-In/Out</h4>\n                  <p className=\"text-gray-600\">Perfect for {currentArea.name} relocations</p>\n                </div>\n              </div>\n            </motion.div>\n          </motion.div>\n        </div>\n      </section>\n\n      {/* Reviews Section */}\n      <ReviewsSection currentLanguage={currentLanguage} />\n\n      {/* Contact Form */}\n      <section className=\"py-16 bg-gray-100\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"max-w-4xl mx-auto\">\n            <h2 className=\"text-3xl font-bold text-gray-800 mb-8 text-center\">\n              Get Your Free {currentArea.name} Cleaning Estimate\n            </h2>\n            <ContactSection currentLanguage={currentLanguage} />\n          </div>\n        </div>\n      </section>\n\n      {/* Local SEO Content */}\n      <section className=\"py-16\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"max-w-4xl mx-auto prose prose-lg\">\n            <h2>Professional House Cleaning Company in {currentArea.name}, Georgia</h2>\n            <p>\n              Santos Cleaning Solutions has been serving {currentArea.name} and surrounding areas since 2015. \n              As a family-owned and operated cleaning company, we take pride in delivering exceptional cleaning \n              services to our neighbors in {currentArea.name}.\n            </p>\n            <h3>Why {currentArea.name} Residents Choose Santos Cleaning</h3>\n            <p>\n              Living in {currentArea.name} means balancing work, family, and community activities. Our professional \n              cleaning services give you more time to enjoy everything {currentArea.name} has to offer, from \n              {currentArea.landmarks[0]} to {currentArea.landmarks[1]}.\n            </p>\n            <p>\n              We serve all {currentArea.name} ZIP codes ({currentArea.zip}) and are familiar with the unique \n              cleaning needs of different home styles in the area. Our licensed and insured cleaning professionals \n              use eco-friendly products and proven techniques to ensure your home is not just clean, but healthy too.\n            </p>\n            <h3>Book Your {currentArea.name} Cleaning Service Today</h3>\n            <p>\n              Join hundreds of satisfied customers in {currentArea.name} who trust Santos Cleaning Solutions \n              for their house cleaning needs. Call <a href=\"tel:+18663509407\">(866) 350-9407</a> or \n              request a free estimate online. We look forward to making your {currentArea.name} home sparkle!\n            </p>\n          </div>\n        </div>\n      </section>\n\n      <Footer currentLanguage={currentLanguage} />\n    </div>\n  );\n};\n\nexport default LocalAreaPage; ","import type { ObserverInstanceCallback } from \"./index\";\n\nconst observerMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: WeakMap<Element | Document, string> = new WeakMap();\nlet rootId = 0;\n\nlet unsupportedValue: boolean | undefined = undefined;\n\n/**\n * What should be the default behavior if the IntersectionObserver is unsupported?\n * Ideally the polyfill has been loaded, you can have the following happen:\n * - `undefined`: Throw an error\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\n * **/\nexport function defaultFallbackInView(inView: boolean | undefined) {\n  unsupportedValue = inView;\n}\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root: IntersectionObserverInit[\"root\"]) {\n  if (!root) return \"0\";\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter(\n      (key) => options[key as keyof IntersectionObserverInit] !== undefined,\n    )\n    .map((key) => {\n      return `${key}_${\n        key === \"root\"\n          ? getRootId(options.root)\n          : options[key as keyof IntersectionObserverInit]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  const id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    // biome-ignore lint/style/useConst: It's fine to use let here, as we are going to assign it later\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === \"undefined\") {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n\n/**\n * @param element - DOM Element to observe\n * @param callback - Callback function to trigger when intersection status changes\n * @param options - Intersection Observer options\n * @param fallbackInView - Fallback inView value.\n * @return Function - Cleanup function that should be triggered to unregister the observer\n */\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n  fallbackInView = unsupportedValue,\n) {\n  if (\n    typeof window.IntersectionObserver === \"undefined\" &&\n    fallbackInView !== undefined\n  ) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio:\n        typeof options.threshold === \"number\" ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds,\n    });\n    return () => {\n      // Nothing to cleanup\n    };\n  }\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  const callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n","import * as React from \"react\";\nimport type { IntersectionObserverProps, PlainChildrenProps } from \"./index\";\nimport { observe } from \"./observe\";\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== \"function\";\n}\n\n/**\n ## Render props\n\n To use the `<InView>` component, you pass it a function. It will be called\n whenever the state changes, with the new value of `inView`. In addition to the\n `inView` prop, children also receive a `ref` that should be set on the\n containing DOM element. This is the element that the IntersectionObserver will\n monitor.\n\n If you need it, you can also access the\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\n on `entry`, giving you access to all the details about the current intersection\n state.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView>\n {({ inView, ref, entry }) => (\n      <div ref={ref}>\n        <h2>{`Header inside viewport ${inView}.`}</h2>\n      </div>\n    )}\n </InView>\n );\n\n export default Component;\n ```\n\n ## Plain children\n\n You can pass any element to the `<InView />`, and it will handle creating the\n wrapping DOM element. Add a handler to the `onChange` method, and control the\n state in your own component. Any extra props you add to `<InView>` will be\n passed to the HTML element, allowing you set the `className`, `style`, etc.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\n </InView>\n );\n\n export default Component;\n ```\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidMount() {\n    this.unobserve();\n    this.observeNode();\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n  }\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView,\n    } = this.props;\n\n    this._unobserveCb = observe(\n      this.node,\n      this.handleChange,\n      {\n        threshold,\n        root,\n        rootMargin,\n        // @ts-ignore\n        trackVisibility,\n        // @ts-ignore\n        delay,\n      },\n      fallbackInView,\n    );\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    const { children } = this.props;\n    if (typeof children === \"function\") {\n      const { inView, entry } = this.state;\n      return children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      as,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      fallbackInView,\n      ...props\n    } = this.props as PlainChildrenProps;\n\n    return React.createElement(\n      as || \"div\",\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n","import * as React from \"react\";\nimport type { InViewHookResponse, IntersectionOptions } from \"./index\";\nimport { observe } from \"./observe\";\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\n/**\n * React Hooks make it easy to monitor the `inView` state of your components. Call\n * the `useInView` hook with the (optional) [options](#options) you need. It will\n * return an array containing a `ref`, the `inView` status and the current\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\n * report the status.\n *\n * @example\n * ```jsx\n * import React from 'react';\n * import { useInView } from 'react-intersection-observer';\n *\n * const Component = () => {\n *   const { ref, inView, entry } = useInView({\n *       threshold: 0,\n *   });\n *\n *   return (\n *     <div ref={ref}>\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\n *     </div>\n *   );\n * };\n * ```\n */\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n  onChange,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const [ref, setRef] = React.useState<Element | null>(null);\n  const callback = React.useRef<IntersectionOptions[\"onChange\"]>(onChange);\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n    entry: undefined,\n  });\n\n  // Store the onChange callback in a `ref`, so we can access the latest instance\n  // inside the `useEffect`, but without triggering a rerender.\n  callback.current = onChange;\n\n  // biome-ignore lint/correctness/useExhaustiveDependencies: threshold is not correctly detected as a dependency\n  React.useEffect(\n    () => {\n      // Ensure we have node ref, and that we shouldn't skip observing\n      if (skip || !ref) return;\n\n      let unobserve: (() => void) | undefined;\n      unobserve = observe(\n        ref,\n        (inView, entry) => {\n          setState({\n            inView,\n            entry,\n          });\n          if (callback.current) callback.current(inView, entry);\n\n          if (entry.isIntersecting && triggerOnce && unobserve) {\n            // If it should only trigger once, unobserve the element after it's inView\n            unobserve();\n            unobserve = undefined;\n          }\n        },\n        {\n          root,\n          rootMargin,\n          threshold,\n          // @ts-ignore\n          trackVisibility,\n          // @ts-ignore\n          delay,\n        },\n        fallbackInView,\n      );\n\n      return () => {\n        if (unobserve) {\n          unobserve();\n        }\n      };\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string, so it won't change between renders.\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      ref,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      fallbackInView,\n      delay,\n    ],\n  );\n\n  const entryTarget = state.entry?.target;\n  const previousEntryTarget = React.useRef<Element | undefined>(undefined);\n  if (\n    !ref &&\n    entryTarget &&\n    !triggerOnce &&\n    !skip &&\n    previousEntryTarget.current !== entryTarget\n  ) {\n    // If we don't have a node ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n    // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n    previousEntryTarget.current = entryTarget;\n    setState({\n      inView: !!initialInView,\n      entry: undefined,\n    });\n  }\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n"],"names":["_ref","currentLanguage","onLanguageChange","area","useParams","t","useTranslations","ref","inView","useInView","threshold","triggerOnce","areaData","marietta","name","population","zip","neighborhoods","landmarks","description","serviceHighlights","buckhead","alpharetta","currentArea","useEffect","window","scrollTo","document","title","itemVariants","hidden","opacity","y","visible","transition","duration","_jsxs","className","children","_jsx","Header","motion","nav","initial","animate","Link","to","h1","delay","p","div","href","variants","staggerChildren","map","highlight","index","join","ReviewsSection","ContactSection","Footer","observerMap","Map","RootIds","WeakMap","rootId","unsupportedValue","optionsToId","options","Object","keys","sort","filter","key","root","has","set","toString","get","observe","element","callback","arguments","length","undefined","fallbackInView","IntersectionObserver","bounds","getBoundingClientRect","isIntersecting","target","intersectionRatio","time","boundingClientRect","intersectionRect","rootBounds","id","observer","elements","instance","thresholds","entries","forEach","entry","_a","some","trackVisibility","isVisible","Array","isArray","createObserver","callbacks","push","splice","indexOf","delete","unobserve","size","disconnect","React","rootMargin","skip","initialInView","onChange","setRef","React2","state","setState","current","entryTarget","previousEntryTarget","result"],"sourceRoot":""}