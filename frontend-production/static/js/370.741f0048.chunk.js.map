{"version":3,"file":"static/js/370.741f0048.chunk.js","mappings":"2OAQA,MA2QA,EA3QsBA,IAA4C,IAA3C,gBAAEC,EAAe,iBAAEC,GAAkBF,EAC1D,MAAM,EAAEG,IAAMC,EAAAA,EAAAA,GAAgBH,IACvBI,EAAKC,IAAUC,EAAAA,EAAAA,IAAU,CAC9BC,UAAW,GACXC,aAAa,KAGfC,EAAAA,EAAAA,WAAU,KACRC,OAAOC,SAAS,EAAG,IAClB,IAEH,MAqEMC,EAAe,CACnBC,OAAQ,CAAEC,QAAS,EAAGC,EAAG,IACzBC,QAAS,CACPF,QAAS,EACTC,EAAG,EACHE,WAAY,CAAEC,SAAU,MAI5B,OACEC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,0BAAyBC,SAAA,EACtCC,EAAAA,EAAAA,KAACC,EAAAA,EAAM,CACLvB,gBAAiBA,EACjBC,iBAAkBA,KAIpBqB,EAAAA,EAAAA,KAAA,WAASF,UAAU,wEAAuEC,UACxFC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,yBAAwBC,UACrCF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,gCAA+BC,SAAA,EAC5CC,EAAAA,EAAAA,KAACE,EAAAA,EAAOC,GAAE,CACRC,QAAS,CAAEZ,QAAS,EAAGC,GAAI,IAC3BY,QAAS,CAAEb,QAAS,EAAGC,EAAG,GAC1BK,UAAU,sCAAqCC,SAChD,8CAGDC,EAAAA,EAAAA,KAACE,EAAAA,EAAOI,EAAC,CACPF,QAAS,CAAEZ,QAAS,EAAGC,GAAI,IAC3BY,QAAS,CAAEb,QAAS,EAAGC,EAAG,GAC1BE,WAAY,CAAEY,MAAO,IACrBT,UAAU,6BAA4BC,SACvC,2EAGDC,EAAAA,EAAAA,KAACE,EAAAA,EAAOM,IAAG,CACTJ,QAAS,CAAEZ,QAAS,EAAGC,GAAI,IAC3BY,QAAS,CAAEb,QAAS,EAAGC,EAAG,GAC1BE,WAAY,CAAEY,MAAO,IAAMR,UAE3BC,EAAAA,EAAAA,KAACS,EAAAA,GAAI,CACHC,GAAG,WACHZ,UAAU,4GAA2GC,SACtH,oCASTC,EAAAA,EAAAA,KAAA,WAASlB,IAAKA,EAAKgB,UAAU,QAAOC,UAClCC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,yBAAwBC,UACrCC,EAAAA,EAAAA,KAACE,EAAAA,EAAOM,IAAG,CACTG,SAjEgB,CACxBpB,OAAQ,CAAEC,QAAS,GACnBE,QAAS,CACPF,QAAS,EACTG,WAAY,CACViB,gBAAiB,MA6DbR,QAAQ,SACRC,QAAStB,EAAS,UAAY,SAC9Be,UAAU,4BAA2BC,SA/HhC,CACb,CACEc,GAAI,gBACJC,MAAO,+BACPC,YAAa,0EACbC,KAAM,eACNC,MAAO,4BACPC,OAAQ,CACN,kCACA,gCACA,8BACA,iCACA,2BAGJ,CACEL,GAAI,eACJC,MAAO,kCACPC,YAAa,yEACbC,KAAM,UACNC,MAAO,8BACPC,OAAQ,CACN,gCACA,yBACA,gCACA,6BACA,mCAGJ,CACEL,GAAI,cACJC,MAAO,4BACPC,YAAa,yDACbC,KAAM,oBACNC,MAAO,gCACPC,OAAQ,CACN,uBACA,2BACA,2BACA,8BACA,uBAGJ,CACEL,GAAI,SACJC,MAAO,6BACPC,YAAa,kDACbC,KAAM,kBACNC,MAAO,gCACPC,OAAQ,CACN,8BACA,wBACA,wBACA,6BACA,yBA2EYC,IAAKC,IACXvB,EAAAA,EAAAA,MAACK,EAAAA,EAAOmB,QAAO,CAEbV,SAAUrB,EACVQ,UAAU,mFAAkFC,SAAA,EAE5FC,EAAAA,EAAAA,KAAA,OAAKF,UAAW,wBAAwBsB,EAAMH,WAC9CpB,EAAAA,EAAAA,MAAA,OAAKC,UAAU,MAAKC,SAAA,EAClBC,EAAAA,EAAAA,KAAA,OAAKF,UAAW,+BAA+BsB,EAAMH,2DAA2DlB,UAC9GC,EAAAA,EAAAA,KAAA,KAAGF,UAAW,OAAOsB,EAAMJ,gCAE7BhB,EAAAA,EAAAA,KAAA,MAAIF,UAAU,wCAAuCC,SAClDqB,EAAMN,SAETd,EAAAA,EAAAA,KAAA,KAAGF,UAAU,qBAAoBC,SAC9BqB,EAAML,eAETf,EAAAA,EAAAA,KAAA,OAAKF,UAAU,iBAAgBC,SAC5BqB,EAAMF,OAAOC,IAAI,CAACG,EAAOC,KACxB1B,EAAAA,EAAAA,MAAA,OAAiBC,UAAU,kCAAiCC,SAAA,EAC1DC,EAAAA,EAAAA,KAAA,KAAGF,UAAU,sCACbE,EAAAA,EAAAA,KAAA,QAAAD,SAAOuB,MAFCC,OAMd1B,EAAAA,EAAAA,MAACY,EAAAA,GAAI,CACHC,GAAI,WAAWU,EAAMP,KACrBf,UAAW,wDAAwDsB,EAAMH,0EAA0ElB,SAAA,CACpJ,mBAECC,EAAAA,EAAAA,KAAA,KAAGF,UAAU,oCA5BZsB,EAAMP,YAsCrBb,EAAAA,EAAAA,KAAA,WAASF,UAAU,oBAAmBC,UACpCC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,yBAAwBC,UACrCF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,oBAAmBC,SAAA,EAChCC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,oDAAmDC,SAAC,uCAGlEF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,4BAA2BC,SAAA,EACxCC,EAAAA,EAAAA,KAAA,KAAGF,UAAU,qBAAoBC,SAAC,0PAKlCC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,4CAA2CC,SAAC,mDAG1DF,EAAAA,EAAAA,MAAA,MAAIC,UAAU,iBAAgBC,SAAA,EAC5BF,EAAAA,EAAAA,MAAA,MAAIC,UAAU,mBAAkBC,SAAA,EAC9BC,EAAAA,EAAAA,KAAA,KAAGF,UAAU,kDACbD,EAAAA,EAAAA,MAAA,QAAAE,SAAA,EAAMC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,oBAAwB,8GAExCF,EAAAA,EAAAA,MAAA,MAAIC,UAAU,mBAAkBC,SAAA,EAC9BC,EAAAA,EAAAA,KAAA,KAAGF,UAAU,kDACbD,EAAAA,EAAAA,MAAA,QAAAE,SAAA,EAAMC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,kBAAsB,4EAEtCF,EAAAA,EAAAA,MAAA,MAAIC,UAAU,mBAAkBC,SAAA,EAC9BC,EAAAA,EAAAA,KAAA,KAAGF,UAAU,kDACbD,EAAAA,EAAAA,MAAA,QAAAE,SAAA,EAAMC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,0BAA8B,2EAE9CF,EAAAA,EAAAA,MAAA,MAAIC,UAAU,mBAAkBC,SAAA,EAC9BC,EAAAA,EAAAA,KAAA,KAAGF,UAAU,kDACbD,EAAAA,EAAAA,MAAA,QAAAE,SAAA,EAAMC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,sBAA0B,+DAG5CC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,4CAA2CC,SAAC,2CAG1DC,EAAAA,EAAAA,KAAA,KAAGF,UAAU,qBAAoBC,SAAC,0OAKlCF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,iDAAgDC,SAAA,EAC7DC,EAAAA,EAAAA,KAAA,KAAGF,UAAU,mCAAkCC,SAAC,yCAGhDC,EAAAA,EAAAA,KAAA,KAAGF,UAAU,gBAAeC,SAAC,uJAWvCC,EAAAA,EAAAA,KAAA,WAASF,UAAU,+DAA8DC,UAC/EF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,qCAAoCC,SAAA,EACjDC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,0BAAyBC,SAAC,sCAGxCC,EAAAA,EAAAA,KAAA,KAAGF,UAAU,+CAA8CC,SAAC,kFAG5DF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,iDAAgDC,SAAA,EAC7DC,EAAAA,EAAAA,KAACS,EAAAA,GAAI,CACHC,GAAG,WACHZ,UAAU,+FAA8FC,SACzG,uBAGDF,EAAAA,EAAAA,MAAA,KACE2B,KAAK,mBACL1B,UAAU,wHAAuHC,SAAA,EAEjIC,EAAAA,EAAAA,KAAA,KAAGF,UAAU,sBAAwB,6BAO7CE,EAAAA,EAAAA,KAACyB,EAAAA,EAAM,CAAC/C,gBAAiBA,O,qMC5QzBgD,EAAc,IAAIC,IASlBC,EAA+C,IAAIC,QACrDC,EAAS,EAETC,OAAwC,EA6BrC,SAASC,EAAYC,GAC1B,OAAOC,OAAOC,KAAKF,GAChBG,OACAC,OACEC,QAA2D,IAAnDL,EAAQK,IAElBnB,IAAKmB,IACJ,MAAO,GAAGA,KACA,SAARA,GArBWC,EAsBGN,EAAQM,KArBvBA,GACDX,EAAQY,IAAID,KAChBT,GAAU,EACVF,EAAQa,IAAIF,EAAMT,EAAOY,aAFKd,EAAQe,IAAIJ,IADxB,KAsBRN,EAAQK,KAvBpB,IAAmBC,IA0BdG,UACL,CA4DO,SAASE,EACdC,EACAC,GAGA,IAFAb,EAAAc,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAoC,CAAC,EACrCG,EAAAH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAiBhB,EAEjB,GACyC,qBAAhC3C,OAAO+D,2BACK,IAAnBD,EACA,CACA,MAAME,EAASP,EAAQQ,wBAWvB,OAVAP,EAASI,EAAgB,CACvBI,eAAgBJ,EAChBK,OAAQV,EACRW,kBAC+B,kBAAtBvB,EAAQhD,UAAyBgD,EAAQhD,UAAY,EAC9DwE,KAAM,EACNC,mBAAoBN,EACpBO,iBAAkBP,EAClBQ,WAAYR,IAEP,MAGT,CAEA,MAAM,GAAEvC,EAAA,SAAIgD,EAAA,SAAUC,GApFxB,SAAwB7B,GAEtB,MAAMpB,EAAKmB,EAAYC,GACvB,IAAI8B,EAAWrC,EAAYiB,IAAI9B,GAE/B,IAAKkD,EAAU,CAEb,MAAMD,EAAW,IAAInC,IAErB,IAAIqC,EAEJ,MAAMH,EAAW,IAAIV,qBAAsBc,IACzCA,EAAQC,QAASC,IAvEvB,IAAAC,EA0EQ,MAAMrF,EACJoF,EAAMb,gBACNU,EAAWK,KAAMpF,GAAckF,EAAMX,mBAAqBvE,GAGxDgD,EAAQqC,iBAA8C,qBAApBH,EAAMI,YAG1CJ,EAAMI,UAAYxF,GAGpB,OAAAqF,EAAAN,EAASnB,IAAIwB,EAAMZ,UAAnBa,EAA4BF,QAASpB,IACnCA,EAAS/D,EAAQoF,QAGpBlC,GAGH+B,EACEH,EAASG,aACRQ,MAAMC,QAAQxC,EAAQhD,WACnBgD,EAAQhD,UACR,CAACgD,EAAQhD,WAAa,IAE5B8E,EAAW,CACTlD,KACAgD,WACAC,YAGFpC,EAAYe,IAAI5B,EAAIkD,EACtB,CAEA,OAAOA,CACT,CAmCqCW,CAAezC,GAG5C0C,EAAYb,EAASnB,IAAIE,IAAY,GAQ3C,OAPKiB,EAAStB,IAAIK,IAChBiB,EAASrB,IAAII,EAAS8B,GAGxBA,EAAUC,KAAK9B,GACfe,EAASjB,QAAQC,GAEV,WAEL8B,EAAUE,OAAOF,EAAUG,QAAQhC,GAAW,GAErB,IAArB6B,EAAU3B,SAEZc,EAASiB,OAAOlC,GAChBgB,EAASmB,UAAUnC,IAGC,IAAlBiB,EAASmB,OAEXpB,EAASqB,aACTxD,EAAYqD,OAAOlE,GAEvB,CACF,CC1GkCsE,EAAAA,UC7B3B,SAASnG,IAWiC,IAXvB,UACxBC,EAAA,MACAsB,EAAA,gBACA+D,EAAA,WACAc,EAAA7C,KACAA,EAAA,YACArD,EAAA,KACAmG,EAAA,cACAC,EAAA,eACApC,EAAA,SACAqC,GACFxC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAyB,CAAC,EA9C1B,IAAAqB,EA+CE,MAAOtF,EAAK0G,GAAgBC,EAAAA,SAAyB,MAC/C3C,EAAiB2C,EAAAA,OAAwCF,IACxDG,EAAOC,GAAkBF,EAAAA,SAAgB,CAC9C1G,SAAUuG,EACVnB,WAAO,IAKTrB,EAAS8C,QAAUL,EAGbE,EAAAA,UACJ,KAEE,GAAIJ,IAASvG,EAAK,OAElB,IAAIkG,EA4BJ,OA3BAA,EAAYpC,EACV9D,EACA,CAACC,EAAQoF,KACPwB,EAAS,CACP5G,SACAoF,UAEErB,EAAS8C,SAAS9C,EAAS8C,QAAQ7G,EAAQoF,GAE3CA,EAAMb,gBAAkBpE,GAAe8F,IAEzCA,IACAA,OAAY,IAGhB,CACEzC,OACA6C,aACAnG,YAEAqF,kBAEA/D,SAEF2C,GAGK,KACD8B,GACFA,MAMN,CAEER,MAAMC,QAAQxF,GAAaA,EAAUyD,WAAazD,EAClDH,EACAyD,EACA6C,EACAlG,EACAmG,EACAf,EACApB,EACA3C,IAIJ,MAAMsF,EAAc,OAAAzB,EAAAsB,EAAMvB,YAAN,EAAAC,EAAab,OAC3BuC,EAA4BL,EAAAA,YAA4B,GAE3D3G,IACD+G,GACC3G,GACAmG,GACDS,EAAoBF,UAAYC,IAIhCC,EAAoBF,QAAUC,EAC9BF,EAAS,CACP5G,SAAUuG,EACVnB,WAAO,KAIX,MAAM4B,EAAS,CAACP,EAAQE,EAAM3G,OAAQ2G,EAAMvB,OAO5C,OAJA4B,EAAOjH,IAAMiH,EAAO,GACpBA,EAAOhH,OAASgH,EAAO,GACvBA,EAAO5B,MAAQ4B,EAAO,GAEfA,CACT,C","sources":["pages/CleaningGuide.js","../node_modules/react-intersection-observer/src/observe.ts","../node_modules/react-intersection-observer/src/InView.tsx","../node_modules/react-intersection-observer/src/useInView.tsx"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { motion } from 'framer-motion';\nimport { useInView } from 'react-intersection-observer';\nimport Header from '../components/Header';\nimport Footer from '../components/Footer';\nimport { useTranslations } from '../utils/translations';\n\nconst CleaningGuide = ({ currentLanguage, onLanguageChange }) => {\n  const { t } = useTranslations(currentLanguage);\n  const [ref, inView] = useInView({\n    threshold: 0.1,\n    triggerOnce: true\n  });\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, []);\n\n  const guides = [\n    {\n      id: 'deep-cleaning',\n      title: 'Complete Deep Cleaning Guide',\n      description: 'Learn professional deep cleaning techniques for every room in your home',\n      icon: 'fa-spray-can',\n      color: 'from-blue-500 to-blue-600',\n      topics: [\n        'Kitchen deep cleaning checklist',\n        'Bathroom sanitization methods',\n        'Room-by-room cleaning order',\n        'Professional cleaning products',\n        'Time-saving techniques'\n      ]\n    },\n    {\n      id: 'eco-friendly',\n      title: 'Eco-Friendly Cleaning Solutions',\n      description: 'Natural and sustainable cleaning methods that are safe for your family',\n      icon: 'fa-leaf',\n      color: 'from-green-500 to-green-600',\n      topics: [\n        'DIY natural cleaning products',\n        'Non-toxic alternatives',\n        'Green cleaning certifications',\n        'Sustainable cleaning tools',\n        'Environmental impact reduction'\n      ]\n    },\n    {\n      id: 'maintenance',\n      title: 'Home Maintenance Schedule',\n      description: 'Create the perfect cleaning routine for your lifestyle',\n      icon: 'fa-calendar-check',\n      color: 'from-purple-500 to-purple-600',\n      topics: [\n        'Daily cleaning tasks',\n        'Weekly cleaning schedule',\n        'Monthly deep clean areas',\n        'Seasonal cleaning checklist',\n        'Organizing systems'\n      ]\n    },\n    {\n      id: 'moving',\n      title: 'Move-In/Out Cleaning Guide',\n      description: 'Everything you need to know for a spotless move',\n      icon: 'fa-truck-moving',\n      color: 'from-orange-500 to-orange-600',\n      topics: [\n        'Pre-move cleaning checklist',\n        'Deposit recovery tips',\n        'New home sanitization',\n        'Packing and cleaning order',\n        'Professional vs DIY'\n      ]\n    }\n  ];\n\n  const containerVariants = {\n    hidden: { opacity: 0 },\n    visible: {\n      opacity: 1,\n      transition: {\n        staggerChildren: 0.1\n      }\n    }\n  };\n\n  const itemVariants = {\n    hidden: { opacity: 0, y: 20 },\n    visible: {\n      opacity: 1,\n      y: 0,\n      transition: { duration: 0.5 }\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Header \n        currentLanguage={currentLanguage}\n        onLanguageChange={onLanguageChange}\n      />\n      \n      {/* Hero Section */}\n      <section className=\"relative py-20 bg-gradient-to-br from-blue-600 to-blue-800 text-white\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"max-w-4xl mx-auto text-center\">\n            <motion.h1 \n              initial={{ opacity: 0, y: -20 }}\n              animate={{ opacity: 1, y: 0 }}\n              className=\"text-4xl md:text-5xl font-bold mb-6\"\n            >\n              Professional Cleaning Guides & Resources\n            </motion.h1>\n            <motion.p \n              initial={{ opacity: 0, y: -20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: 0.2 }}\n              className=\"text-xl text-blue-100 mb-8\"\n            >\n              Expert tips, techniques, and schedules from Santos Cleaning Solutions\n            </motion.p>\n            <motion.div\n              initial={{ opacity: 0, y: -20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: 0.4 }}\n            >\n              <Link\n                to=\"/contact\"\n                className=\"inline-block bg-white text-blue-600 px-8 py-3 rounded-lg font-semibold hover:bg-blue-50 transition-colors\"\n              >\n                Get Professional Help\n              </Link>\n            </motion.div>\n          </div>\n        </div>\n      </section>\n\n      {/* Guides Grid */}\n      <section ref={ref} className=\"py-16\">\n        <div className=\"container mx-auto px-4\">\n          <motion.div\n            variants={containerVariants}\n            initial=\"hidden\"\n            animate={inView ? \"visible\" : \"hidden\"}\n            className=\"grid md:grid-cols-2 gap-8\"\n          >\n            {guides.map((guide) => (\n              <motion.article\n                key={guide.id}\n                variants={itemVariants}\n                className=\"bg-white rounded-2xl shadow-lg overflow-hidden hover:shadow-xl transition-shadow\"\n              >\n                <div className={`h-2 bg-gradient-to-r ${guide.color}`} />\n                <div className=\"p-8\">\n                  <div className={`w-16 h-16 bg-gradient-to-br ${guide.color} rounded-full flex items-center justify-center mb-6`}>\n                    <i className={`fas ${guide.icon} text-white text-2xl`}></i>\n                  </div>\n                  <h2 className=\"text-2xl font-bold text-gray-800 mb-4\">\n                    {guide.title}\n                  </h2>\n                  <p className=\"text-gray-600 mb-6\">\n                    {guide.description}\n                  </p>\n                  <div className=\"space-y-2 mb-6\">\n                    {guide.topics.map((topic, index) => (\n                      <div key={index} className=\"flex items-center text-gray-700\">\n                        <i className=\"fas fa-check text-green-500 mr-3\"></i>\n                        <span>{topic}</span>\n                      </div>\n                    ))}\n                  </div>\n                  <Link\n                    to={`/guides/${guide.id}`}\n                    className={`inline-flex items-center text-white bg-gradient-to-r ${guide.color} px-6 py-3 rounded-lg font-semibold hover:shadow-lg transition-all`}\n                  >\n                    Read Full Guide\n                    <i className=\"fas fa-arrow-right ml-2\"></i>\n                  </Link>\n                </div>\n              </motion.article>\n            ))}\n          </motion.div>\n        </div>\n      </section>\n\n      {/* SEO Content Section */}\n      <section className=\"py-16 bg-gray-100\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"max-w-4xl mx-auto\">\n            <h2 className=\"text-3xl font-bold text-gray-800 mb-8 text-center\">\n              Why Professional Cleaning Matters\n            </h2>\n            <div className=\"prose prose-lg max-w-none\">\n              <p className=\"text-gray-700 mb-6\">\n                At Santos Cleaning Solutions, we've been serving the Metro Atlanta area for over 8 years, \n                and we've learned that professional cleaning is about more than just a tidy space. It's about \n                creating a healthy, comfortable environment for your family.\n              </p>\n              <h3 className=\"text-2xl font-semibold text-gray-800 mb-4\">\n                The Benefits of Regular Professional Cleaning\n              </h3>\n              <ul className=\"space-y-3 mb-8\">\n                <li className=\"flex items-start\">\n                  <i className=\"fas fa-check-circle text-green-500 mt-1 mr-3\"></i>\n                  <span><strong>Healthier Home:</strong> Professional cleaning eliminates allergens, bacteria, and viruses that regular cleaning might miss.</span>\n                </li>\n                <li className=\"flex items-start\">\n                  <i className=\"fas fa-check-circle text-green-500 mt-1 mr-3\"></i>\n                  <span><strong>Time Savings:</strong> Reclaim your weekends and spend time on what matters most to you.</span>\n                </li>\n                <li className=\"flex items-start\">\n                  <i className=\"fas fa-check-circle text-green-500 mt-1 mr-3\"></i>\n                  <span><strong>Professional Results:</strong> Our trained team uses commercial-grade equipment and techniques.</span>\n                </li>\n                <li className=\"flex items-start\">\n                  <i className=\"fas fa-check-circle text-green-500 mt-1 mr-3\"></i>\n                  <span><strong>Stress Reduction:</strong> Come home to a clean, organized space every time.</span>\n                </li>\n              </ul>\n              <h3 className=\"text-2xl font-semibold text-gray-800 mb-4\">\n                Serving Atlanta's Premier Communities\n              </h3>\n              <p className=\"text-gray-700 mb-6\">\n                We proudly serve Marietta, Buckhead, Sandy Springs, Alpharetta, Roswell, Dunwoody, \n                Johns Creek, and surrounding areas. Our team understands the unique needs of Atlanta \n                homes, from historic properties to modern luxury residences.\n              </p>\n              <div className=\"bg-blue-50 border-l-4 border-blue-500 p-6 my-8\">\n                <p className=\"text-gray-800 font-semibold mb-2\">\n                  Ready to experience the difference?\n                </p>\n                <p className=\"text-gray-700\">\n                  Contact Santos Cleaning Solutions today for a free estimate and discover why \n                  hundreds of Atlanta families trust us with their homes.\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-16 bg-gradient-to-br from-blue-600 to-blue-800 text-white\">\n        <div className=\"container mx-auto px-4 text-center\">\n          <h2 className=\"text-3xl font-bold mb-4\">\n            Need Professional Cleaning Help?\n          </h2>\n          <p className=\"text-xl text-blue-100 mb-8 max-w-2xl mx-auto\">\n            Let our expert team handle the cleaning while you focus on what matters most\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Link\n              to=\"/contact\"\n              className=\"bg-white text-blue-600 px-8 py-3 rounded-lg font-semibold hover:bg-blue-50 transition-colors\"\n            >\n              Get Free Estimate\n            </Link>\n            <a\n              href=\"tel:+18663509407\"\n              className=\"border-2 border-white text-white px-8 py-3 rounded-lg font-semibold hover:bg-white hover:text-blue-600 transition-all\"\n            >\n              <i className=\"fas fa-phone mr-2\"></i>\n              (866) 350-9407\n            </a>\n          </div>\n        </div>\n      </section>\n\n      <Footer currentLanguage={currentLanguage} />\n    </div>\n  );\n};\n\nexport default CleaningGuide; ","import type { ObserverInstanceCallback } from \"./index\";\n\nconst observerMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: WeakMap<Element | Document, string> = new WeakMap();\nlet rootId = 0;\n\nlet unsupportedValue: boolean | undefined = undefined;\n\n/**\n * What should be the default behavior if the IntersectionObserver is unsupported?\n * Ideally the polyfill has been loaded, you can have the following happen:\n * - `undefined`: Throw an error\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\n * **/\nexport function defaultFallbackInView(inView: boolean | undefined) {\n  unsupportedValue = inView;\n}\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root: IntersectionObserverInit[\"root\"]) {\n  if (!root) return \"0\";\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter(\n      (key) => options[key as keyof IntersectionObserverInit] !== undefined,\n    )\n    .map((key) => {\n      return `${key}_${\n        key === \"root\"\n          ? getRootId(options.root)\n          : options[key as keyof IntersectionObserverInit]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  const id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    // biome-ignore lint/style/useConst: It's fine to use let here, as we are going to assign it later\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === \"undefined\") {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n\n/**\n * @param element - DOM Element to observe\n * @param callback - Callback function to trigger when intersection status changes\n * @param options - Intersection Observer options\n * @param fallbackInView - Fallback inView value.\n * @return Function - Cleanup function that should be triggered to unregister the observer\n */\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n  fallbackInView = unsupportedValue,\n) {\n  if (\n    typeof window.IntersectionObserver === \"undefined\" &&\n    fallbackInView !== undefined\n  ) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio:\n        typeof options.threshold === \"number\" ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds,\n    });\n    return () => {\n      // Nothing to cleanup\n    };\n  }\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  const callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n","import * as React from \"react\";\nimport type { IntersectionObserverProps, PlainChildrenProps } from \"./index\";\nimport { observe } from \"./observe\";\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== \"function\";\n}\n\n/**\n ## Render props\n\n To use the `<InView>` component, you pass it a function. It will be called\n whenever the state changes, with the new value of `inView`. In addition to the\n `inView` prop, children also receive a `ref` that should be set on the\n containing DOM element. This is the element that the IntersectionObserver will\n monitor.\n\n If you need it, you can also access the\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\n on `entry`, giving you access to all the details about the current intersection\n state.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView>\n {({ inView, ref, entry }) => (\n      <div ref={ref}>\n        <h2>{`Header inside viewport ${inView}.`}</h2>\n      </div>\n    )}\n </InView>\n );\n\n export default Component;\n ```\n\n ## Plain children\n\n You can pass any element to the `<InView />`, and it will handle creating the\n wrapping DOM element. Add a handler to the `onChange` method, and control the\n state in your own component. Any extra props you add to `<InView>` will be\n passed to the HTML element, allowing you set the `className`, `style`, etc.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\n </InView>\n );\n\n export default Component;\n ```\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidMount() {\n    this.unobserve();\n    this.observeNode();\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n  }\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView,\n    } = this.props;\n\n    this._unobserveCb = observe(\n      this.node,\n      this.handleChange,\n      {\n        threshold,\n        root,\n        rootMargin,\n        // @ts-ignore\n        trackVisibility,\n        // @ts-ignore\n        delay,\n      },\n      fallbackInView,\n    );\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    const { children } = this.props;\n    if (typeof children === \"function\") {\n      const { inView, entry } = this.state;\n      return children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      as,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      fallbackInView,\n      ...props\n    } = this.props as PlainChildrenProps;\n\n    return React.createElement(\n      as || \"div\",\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n","import * as React from \"react\";\nimport type { InViewHookResponse, IntersectionOptions } from \"./index\";\nimport { observe } from \"./observe\";\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\n/**\n * React Hooks make it easy to monitor the `inView` state of your components. Call\n * the `useInView` hook with the (optional) [options](#options) you need. It will\n * return an array containing a `ref`, the `inView` status and the current\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\n * report the status.\n *\n * @example\n * ```jsx\n * import React from 'react';\n * import { useInView } from 'react-intersection-observer';\n *\n * const Component = () => {\n *   const { ref, inView, entry } = useInView({\n *       threshold: 0,\n *   });\n *\n *   return (\n *     <div ref={ref}>\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\n *     </div>\n *   );\n * };\n * ```\n */\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n  onChange,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const [ref, setRef] = React.useState<Element | null>(null);\n  const callback = React.useRef<IntersectionOptions[\"onChange\"]>(onChange);\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n    entry: undefined,\n  });\n\n  // Store the onChange callback in a `ref`, so we can access the latest instance\n  // inside the `useEffect`, but without triggering a rerender.\n  callback.current = onChange;\n\n  // biome-ignore lint/correctness/useExhaustiveDependencies: threshold is not correctly detected as a dependency\n  React.useEffect(\n    () => {\n      // Ensure we have node ref, and that we shouldn't skip observing\n      if (skip || !ref) return;\n\n      let unobserve: (() => void) | undefined;\n      unobserve = observe(\n        ref,\n        (inView, entry) => {\n          setState({\n            inView,\n            entry,\n          });\n          if (callback.current) callback.current(inView, entry);\n\n          if (entry.isIntersecting && triggerOnce && unobserve) {\n            // If it should only trigger once, unobserve the element after it's inView\n            unobserve();\n            unobserve = undefined;\n          }\n        },\n        {\n          root,\n          rootMargin,\n          threshold,\n          // @ts-ignore\n          trackVisibility,\n          // @ts-ignore\n          delay,\n        },\n        fallbackInView,\n      );\n\n      return () => {\n        if (unobserve) {\n          unobserve();\n        }\n      };\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string, so it won't change between renders.\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      ref,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      fallbackInView,\n      delay,\n    ],\n  );\n\n  const entryTarget = state.entry?.target;\n  const previousEntryTarget = React.useRef<Element | undefined>(undefined);\n  if (\n    !ref &&\n    entryTarget &&\n    !triggerOnce &&\n    !skip &&\n    previousEntryTarget.current !== entryTarget\n  ) {\n    // If we don't have a node ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n    // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n    previousEntryTarget.current = entryTarget;\n    setState({\n      inView: !!initialInView,\n      entry: undefined,\n    });\n  }\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n"],"names":["_ref","currentLanguage","onLanguageChange","t","useTranslations","ref","inView","useInView","threshold","triggerOnce","useEffect","window","scrollTo","itemVariants","hidden","opacity","y","visible","transition","duration","_jsxs","className","children","_jsx","Header","motion","h1","initial","animate","p","delay","div","Link","to","variants","staggerChildren","id","title","description","icon","color","topics","map","guide","article","topic","index","href","Footer","observerMap","Map","RootIds","WeakMap","rootId","unsupportedValue","optionsToId","options","Object","keys","sort","filter","key","root","has","set","toString","get","observe","element","callback","arguments","length","undefined","fallbackInView","IntersectionObserver","bounds","getBoundingClientRect","isIntersecting","target","intersectionRatio","time","boundingClientRect","intersectionRect","rootBounds","observer","elements","instance","thresholds","entries","forEach","entry","_a","some","trackVisibility","isVisible","Array","isArray","createObserver","callbacks","push","splice","indexOf","delete","unobserve","size","disconnect","React","rootMargin","skip","initialInView","onChange","setRef","React2","state","setState","current","entryTarget","previousEntryTarget","result"],"sourceRoot":""}